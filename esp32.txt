import { MongoClient } from 'mongodb';

export default async function handler(req, res) {
  if (req.method === 'POST') {
    const { aadharNumber, month, creditsEarned } = req.body;

    // Ensure all required fields are present
    if (!aadharNumber || !month || !creditsEarned) {
      return res.status(400).json({ message: 'Missing required fields' });
    }

    // MongoDB Atlas connection string
    const uri = 'mongodb+srv://StorageUser:CI82H5SY6eLch1d8@cluster0.4uqzo.mongodb.net/carbonCreditsUsersDB?retryWrites=true&w=majority';

    // Connect to MongoDB
    const client = await MongoClient.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true });
    const db = client.db();

    try {
      // Find the user by aadharNumber in the 'farmers' collection
      const user = await db.collection('farmers').findOne({ aadharNumber: aadharNumber });

      if (!user) {
        return res.status(404).json({ message: 'User not found' });
      }

      // Check if the month already exists in the carbonCreditsHistory array
      const monthExists = user.carbonCreditsHistory.some(entry => entry.month === month);

      if (monthExists) {
        // If the month exists, update the creditsEarned for that month
        const result = await db.collection('farmers').updateOne(
          { aadharNumber: aadharNumber, 'carbonCreditsHistory.month': month },
          {
            $set: { 'carbonCreditsHistory.$.creditsEarned': creditsEarned }
          }
        );
        res.status(200).json({ message: 'Credits updated for existing month', data: result });
      } else {
        // If the month doesn't exist, push a new entry into the array
        const result = await db.collection('farmers').updateOne(
          { aadharNumber: aadharNumber },
          {
            $push: {
              carbonCreditsHistory: {
                month: month,
                creditsEarned: creditsEarned
              }
            }
          }
        );
        res.status(201).json({ message: 'New month added with credits', data: result });
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'Internal Server Error', error: error.message });
    } finally {
      // Close MongoDB client connection
      client.close();
    }
  } else {
    res.status(405).json({ message: 'Method Not Allowed' });
  }
}